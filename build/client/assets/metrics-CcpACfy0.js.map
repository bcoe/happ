{"version":3,"file":"metrics-CcpACfy0.js","sources":["../../../app/providers/metrics.tsx"],"sourcesContent":["import * as React from \"react\";\n\nexport interface MetricType {\n  daily: Array<{\n    name: string;\n    completed: number;\n  }>\n}\n\ninterface MetricsType {\n  metrics: MetricType; \n  load: () => Promise<void>;\n  set: (metrics: MetricType) => {};\n}\n\nconst MetricsContext = React.createContext<MetricsType>(null!);\n\nexport function MetricsProvider({ children }: { children: React.ReactNode }) {\n  const [metrics, setMetrics] =  React.useState<MetricType>({daily: []});\n\n  const set = (metrics: MetricType) => {\n    setMetrics(metrics);\n    return {}\n  }\n\n  const load = async () => {\n    const resp = await fetch(\"/v1/metrics\");\n    const m = await resp.json();\n    set({daily: m.map((item) => {\n      const date = (new Date(item.date)).toISOString().split('T')[0];\n      return {\n        name: date,\n        completed: item.habits_completed / item.total_habits_for_day\n      }\n    })});\n  }\n\n  const value = { metrics, load, set };\n\n  return <MetricsContext.Provider value={value}>{children}</MetricsContext.Provider>;\n}\n\nexport function useMetrics() {\n  return React.useContext(MetricsContext);\n}\n"],"names":["MetricsContext","React.createContext","MetricsProvider","children","metrics","setMetrics","React.useState","set","value","m","item","jsx","useMetrics","React.useContext"],"mappings":"4WAeA,MAAMA,EAAiBC,EAAAA,cAAiC,IAAK,EAE7C,SAAAC,EAAgB,CAAE,SAAAC,GAA2C,CACrE,KAAA,CAACC,EAASC,CAAU,EAAKC,WAA2B,CAAC,MAAO,CAAC,CAAA,CAAE,EAE/DC,EAAOH,IACXC,EAAWD,CAAO,EACX,IAeHI,EAAQ,CAAE,QAAAJ,EAAS,KAZZ,SAAY,CAEjB,MAAAK,EAAI,MADG,MAAM,MAAM,aAAa,GACjB,OACrBF,EAAI,CAAC,MAAOE,EAAE,IAAKC,IAEV,CACL,KAFY,IAAI,KAAKA,EAAK,IAAI,EAAG,YAAA,EAAc,MAAM,GAAG,EAAE,CAAC,EAG3D,UAAWA,EAAK,iBAAmBA,EAAK,oBAAA,EAE3C,CAAE,CAAA,CAAA,EAG0B,IAAAH,CAAI,EAEnC,OAAQI,EAAAA,IAAAX,EAAe,SAAf,CAAwB,MAAAQ,EAAe,SAAAL,CAAS,CAAA,CAC1D,CAEO,SAASS,GAAa,CACpB,OAAAC,EAAAA,WAAiBb,CAAc,CACxC"}