{"version":3,"file":"habits-CoJB1GUe.js","sources":["../../../app/providers/habits.tsx"],"sourcesContent":["import * as React from \"react\";\n\nexport interface HabitType {\n  name: string;\n  habit_id: string;\n  id: string;\n  status: boolean;\n  date: string;\n}\n\ninterface HabitsType {\n  habits: Array<HabitType>; \n  empty: boolean;\n  load: () => Promise<void>;\n  create: (name: string) => Promise<void>;\n  set: (habits: Array<HabitType>) => {};\n  toggle: (id: string) => Promise<void>;\n  move: (oldIndex: number, newIndex: number) => Promise<void>;\n}\n\nconst HabitsContext = React.createContext<HabitsType>(null!);\n\nexport function HabitsProvider({ children }: { children: React.ReactNode }) {\n  const [habits, setHabits] =  React.useState<Array<HabitType>>([]);\n  const [empty, setEmpty] = React.useState<boolean>(false);\n\n  const set = (habits: Array<HabitType>) => {\n    setHabits([...habits]);\n    setEmpty(!habits.length);\n    return {}\n  }\n\n  const create = async (name: string) => {\n    await fetch('/v1/habits', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({name})\n    });\n  }\n\n  const toggle = async (id: string) => {\n    const habit = habits.find((h) => {\n      if (h.id === id) return true;\n    })\n    if (!habit) return;\n    await fetch('/v1/habits-daily', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        habit_id: habit.habit_id,\n        status: !habit.status,\n        date: habit.date,\n      })\n    });\n  }\n\n  const move = async (oldIndex: number, newIndex: number) => {\n    await fetch('/v1/habits/array-move', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        oldIndex,\n        newIndex\n      })\n    });\n  }\n\n  const load = async () => {\n    const resp = await fetch(\"/v1/habits-daily\");\n    const habits = await resp.json();\n    habits.map((h) => {\n      h.id = h.habit_id;\n    });\n    set(habits);\n  }\n\n  const value = { habits, empty, load, set, create, toggle, move };\n\n  return <HabitsContext.Provider value={value}>{children}</HabitsContext.Provider>;\n}\n\nexport function useHabits() {\n  return React.useContext(HabitsContext);\n}\n"],"names":["HabitsContext","React.createContext","HabitsProvider","children","habits","setHabits","React.useState","empty","setEmpty","set","value","h","name","id","habit","oldIndex","newIndex","jsx","useHabits","React.useContext"],"mappings":"4WAoBA,MAAMA,EAAgBC,EAAAA,cAAgC,IAAK,EAE3C,SAAAC,EAAe,CAAE,SAAAC,GAA2C,CAC1E,KAAM,CAACC,EAAQC,CAAS,EAAKC,EAAM,SAA2B,CAAE,CAAA,EAC1D,CAACC,EAAOC,CAAQ,EAAIF,WAAwB,EAAK,EAEjDG,EAAOL,IACDC,EAAA,CAAC,GAAGD,CAAM,CAAC,EACZI,EAAA,CAACJ,EAAO,MAAM,EAChB,IAqDHM,EAAQ,CAAE,OAAAN,EAAQ,MAAAG,EAAO,KATlB,SAAY,CAEjBH,MAAAA,EAAS,MADF,MAAM,MAAM,kBAAkB,GACjB,OAC1BA,EAAO,IAAKO,GAAM,CAChBA,EAAE,GAAKA,EAAE,QAAA,CACV,EACDF,EAAIL,CAAM,CAAA,EAGyB,IAAAK,EAAK,OAlD3B,MAAOG,GAAiB,CACrC,MAAM,MAAM,aAAc,CACxB,OAAQ,OACR,QAAS,CACP,eAAgB,kBAClB,EACA,KAAM,KAAK,UAAU,CAAC,KAAAA,EAAK,CAAA,CAC5B,CAAA,EA2C+C,OAxCnC,MAAOC,GAAe,CACnC,MAAMC,EAAQV,EAAO,KAAMO,GAAM,CAC/B,GAAIA,EAAE,KAAOE,EAAW,MAAA,EAAA,CACzB,EACIC,GACL,MAAM,MAAM,mBAAoB,CAC9B,OAAQ,OACR,QAAS,CACP,eAAgB,kBAClB,EACA,KAAM,KAAK,UAAU,CACnB,SAAUA,EAAM,SAChB,OAAQ,CAACA,EAAM,OACf,KAAMA,EAAM,IAAA,CACb,CAAA,CACF,CAAA,EAyBuD,KAtB7C,MAAOC,EAAkBC,IAAqB,CACzD,MAAM,MAAM,wBAAyB,CACnC,OAAQ,OACR,QAAS,CACP,eAAgB,kBAClB,EACA,KAAM,KAAK,UAAU,CACnB,SAAAD,EACA,SAAAC,CAAA,CACD,CAAA,CACF,CAAA,GAcH,OAAQC,EAAAA,IAAAjB,EAAc,SAAd,CAAuB,MAAAU,EAAe,SAAAP,CAAS,CAAA,CACzD,CAEO,SAASe,GAAY,CACnB,OAAAC,EAAAA,WAAiBnB,CAAa,CACvC"}